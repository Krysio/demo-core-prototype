import BufferWrapper from "../../../libs/BufferWrapper";
import * as secp256k1 from "../../../services/crypto/ec/secp256k1";

/******************************/

const [privateKey, publicKey] = secp256k1.getKeys();
const buffTxn = `14 10  01 02 03  00 ${publicKey.toString('hex')}  17 33  04 11 22 33 44`.replace(/\s/g, '');

/******************************/

abstract class Base<T> {
    protected abstract value: T;
    protected parent: Fragment<{}> = null;

    public setValue(value: T) {
        this.value = value;
        return this;
    }
    public getValue() {
        return this.value;
    }

    public abstract fromBuffer(buffer: BufferWrapper): this;
    public abstract toBuffer(): BufferWrapper;
    public init() { }
}

abstract class Fragment<S extends { [key: number]: Base<unknown> }> extends Base<any> {
    protected abstract schema: S;
    protected value = null;
    public structure = {} as S;

    init() {
        this.initFields();
    }
    initFields() {
        for (let key in this.schema) {
            const constructor = this.schema[key];
            //@ts-ignore
            this.set(key, new constructor())
        }
    }

    get<Key extends keyof S, Field extends S[Key]>(key: Key) {
        //@ts-ignore
        return this.structure[key] as InstanceType<Field>;
    }
    set<Key extends keyof S, Field extends S[Key]>(key: Key, field: Field) {
        this.structure[key] = field;
        return this;
    }
    //@ts-ignore
    setValue<
        K extends keyof S,
        F extends S[K],
        //@ts-ignore
        I extends InstanceType<F>,
        //@ts-ignore
        V extends ReturnType<I["getValue"]>
    >(key: K, value: V) {
        const field = this.get(key);

        field.setValue(value);

        return this;
    }
    //@ts-ignore
    getValue<
        K extends keyof S,
        F extends S[K],
        //@ts-ignore
        I extends InstanceType<F>,
        //@ts-ignore
        V extends ReturnType<I["getValue"]>
    >(
        key: K
    ) {
        const field = this.get(key);

        return field.getValue() as V;
    }

    toBuffer() {
        const arrayOfBuff = [] as BufferWrapper[];

        for (let key in this.structure) {
            const field = this.get(key) as Base<unknown>;
            arrayOfBuff.push(field.toBuffer());
        }
        return BufferWrapper.concat(arrayOfBuff);
    }

    fromBuffer(buffer: BufferWrapper) {
        const arrayOfBuff = [] as BufferWrapper[];

        for (let key in this.structure) {
            const field = this.get(key) as Base<unknown>;

            field.fromBuffer(buffer);
        }

        return this;
    }
}

abstract class TypedFragment
<
    //@ts-ignore
    TL extends { [key: keyof TL]: typeof Base }
>
extends Fragment<TypedFragment<TL>["schema"]> {
    protected schema = {
        'type': Uleb128
    };
    protected abstract types: TL;
    //@ts-ignore
    protected subStructure: InstanceType<TL[ S ]>;

    setType<Key extends keyof TL>(value: Key) {
        this.setValue('type', value as number);
        return this;
    }

}

/******************************/

class Uleb128 extends Base<number> {
    protected value = -1;

    public fromBuffer(buffer: BufferWrapper) {
        this.value = buffer.readUleb128();
        return this;
    }
    public toBuffer() {
        return BufferWrapper.numberToUleb128Buffer(this.value);
    }
    public isValid() {
        return this.value > -1;
    }
}

/******************************/

class Coord extends Fragment<Coord["schema"]> {
    protected schema = {
        'x': Uleb128,
        'y': Uleb128
    }
}

/******************************/

class TxnStandalone extends TypedFragment<TxnStandalone["types"]> {
    protected types = {
        0: null,
        2: Coord
    };
}

/******************************/

const typeMap = {
    'uleb128': Uleb128,
    'coord': Coord,
    'txnStandalone': TxnStandalone
};
type TypeMap = typeof typeMap;
class Structure {
    static create<Key extends keyof typeof typeMap, Type extends TypeMap[Key]>(key: Key) {
        const instance = new typeMap[key]();

        instance.init();
        //@ts-ignore
        return instance as InstanceType<Type>;
    }
}

const a = Structure.create('txnStandalone');
const b = a.setType(2);

/******************************/

describe('main', () => {
    it('Uleb128', () => {
        const values = [0, 1, 127, 128, 9999];

        for (let value of values) {
            const buffer = BufferWrapper.numberToUleb128Buffer(value);
            const element1 = Structure.create('uleb128').setValue(value);
            const element2 = Structure.create('uleb128').fromBuffer(buffer);

            expect(element1.getValue()).toBe(value);
            expect(element2.getValue()).toBe(value);
            expect(Buffer.compare(
                element1.toBuffer(),
                buffer
            )).toBe(0);
            expect(Buffer.compare(
                element2.toBuffer(),
                buffer
            )).toBe(0);
        }
    });
    it('fragment', () => {
        const values = [[0, 0], [1, 1], [127, 128]];

        for (let [x, y] of values) {
            const buffer = BufferWrapper.concat([
                BufferWrapper.numberToUleb128Buffer(x),
                BufferWrapper.numberToUleb128Buffer(y)
            ]);
            const element1 = Structure.create('coord').setValue('x', x).setValue('y', y);
            const element2 = Structure.create('coord').fromBuffer(buffer);
            const element3 = Structure.create('coord');

            element3.get('x').setValue(x);
            element3.get('y').setValue(y);


            expect(element1.getValue('x')).toBe(x);
            expect(element1.getValue('y')).toBe(y);

            expect(Buffer.compare(
                element1.toBuffer(),
                buffer
            )).toBe(0);
            expect(Buffer.compare(
                element2.toBuffer(),
                buffer
            )).toBe(0);
            expect(Buffer.compare(
                element3.toBuffer(),
                buffer
            )).toBe(0);
        }
    });
    it('typed', () => {

    });
    it('txn', () => {

    });
});

/****************************** /
import BufferWrapper from "../../../libs/BufferWrapper";
import * as secp256k1 from "../../../services/crypto/ec/secp256k1";
import {
    TxnStandalone,
    User, Key,

    TYPE_USER_ADMIN,
    TYPE_KEY_Secp256k1,
    EMPTY_BLOCK_HASH
} from "@/models/structure";
import { Block } from "@/models/Block";


const [privateKey, publicKey] = secp256k1.getKeys();
const buffHex = `14 10  01 02 03  00 ${publicKey.toString('hex')}  17 33  04 11 22 33 44`.replace(/\s/g, '');
const buff = BufferWrapper.from(buffHex + buffHex, 'hex');
const obj1 = TxnStandalone.create(buff, '-');
const obj2 = TxnStandalone.create();
const obj3 = TxnStandalone.create(buff, '-');
const block = Block.create() as Block;

Object.assign(window, {
    test: {
        obj1, obj2, block
    }
});

const user = User.create()
    .set('type', TYPE_USER_ADMIN)
    .set('userId', 0x02)
    .set('level', 0x03)
    .set('key',
        Key.create()
            .set('type', TYPE_KEY_Secp256k1)
            .set('data', BufferWrapper.create(publicKey))
    );
obj2
    .set('version', 0x14)
    .set('type', 0x10)
    .set('data', user)
    .set('signingBlockIndex', 0x17)
    .set('author', 0x33)
    .set('signature', BufferWrapper.from([0x11, 0x22, 0x33, 0x44]));

block
    .set('version', 0x14)
    .set('time', Date.now())
    .set('index', 0x00)
    .set('previousBlockHash', EMPTY_BLOCK_HASH);

console.log(obj1, obj2, obj3, obj1.isValid(), obj2.isValid(), obj3.isValid(), block);

console.log(buff.toString('hex'));

const buff2 = obj1.toBuffer();
console.log(buff2.toString('hex'), Buffer.compare(buff, buff2) === 0);
console.log(obj2.toBuffer().toString('hex'));
console.log(1, block.get('body').getValue().toString('hex'));
block.insertTransaction(buff);
console.log(1, block.get('body').getValue().toString('hex'));
const blockBuff = block.toBuffer();
const block2 = Block.create(blockBuff);
console.log(2, block2.get('body').getValue().toString('hex'));
console.log(2, block2.get('body').getValue().toString('hex'));

console.log(8, blockBuff.toString('hex'), block2, TxnStandalone.create(block2.get('body').getValue()));

//*/